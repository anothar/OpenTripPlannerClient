using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Anothar.OpenTripPlannerClient
{
    /// <summary>
    /// Represents one instruction in walking directions
    /// </summary>
    /// <seealso cref="http://dev.opentripplanner.org/apidoc/0.15.0/ns0_walkStep.html"/>
    public class TripStep
    {
        /// <summary>
        /// The distance in meters that this step takes.
        /// </summary>
        public double Distance { get; set; }

        /// <summary>
        /// The relative direction of this step. 
        /// </summary>
        public String RelativeDirection { get; set; }

        /// <summary>
        /// The name of the street. 
        /// </summary>
        public String StreetName { get; set; }

        /// <summary>
        /// The absolute direction of this step. 
        /// </summary>
        public String AbsoluteDirection { get; set; }

        /// <summary>
        /// When exiting a highway or traffic circle, the exit name/number. 
        /// </summary>
        public String Exit { get; set; }

        /// <summary>
        /// Indicates whether or not a street changes direction at an intersection. 
        /// </summary>
        [JsonProperty("stayOn")]
        public bool IsStayOn { get; set; }

        /// <summary>
        /// This step is on an open area, such as a plaza or train platform, and thus the directions should say something like "cross" 
        /// </summary>
        [JsonProperty("area")]
        public bool IsArea { get; set; }

        /// <summary>
        /// The name of this street was generated by the system, so we should only display it once, and generally just display right/left directions 
        /// </summary>
        [JsonProperty("bogusName")]
        public bool IsBogusName { get; set; }

        /// <summary>
        /// Coordinate of start point
        /// </summary>
        public GeoCoordinate Coordinate { get; set; }

        [JsonExtensionData]
        private readonly IDictionary<string, JToken> _additionalData=new Dictionary<string, JToken>();

        [OnDeserialized]
        private void OnDeserialized(StreamingContext context)
        {

            var longitude = (double)_additionalData["lon"];
            var latitude = (double)_additionalData["lon"];
            Coordinate = new GeoCoordinate(latitude, longitude);
        }
    }
}
